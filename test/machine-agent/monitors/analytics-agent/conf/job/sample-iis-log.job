# The version of this job configuration file. This should not be changed by the user.
version: 2

# Optional property. Defaults to "false"
#
enabled: false

# Mandatory property.
#
# Source can be of two types:
#   1) file: This allows tailing a log file. It consists of three parameters:
#       - path: Path to the directory where files need to be tailed.
#       - nameGlob: The name/expression to tail the matching files.
#       - startAtEnd: If set to true allows tailing the file from the end.
#         Example:
#         1) path: /var/log
#            nameGlob: */*.log searches for .log files one level deep in the /var/log
#            directory (matches '/var/log/cassandra/system.log' but not
#            '/var/log/apache2/logs/error.log').
#         2) path: /var/log
#            nameGlob: **/*.log searches for .log files even in the sub-directories in
#            /var/log directory (matches both '/var/log/apache2/logs/error.log' and
#            '/var/log/cassandra/system.log').
#       On Windows, path should be provided as if on Unix environments.
#       Ex: demo/logs
#       Ex: C:/app/logs
#   2) syslog: Listens to Syslog messages on a network port. It consists of two parameters:
#       - protocol: The transport layer protocol that will be used. Currently
#         we support only tcp.
#       - port: The port at which the server will be listening to receive the
#         syslog messages. Currently, we support one port per job file, and any
#         enabled job file should be configured to receive messages at different
#         ports. The user must make sure it does not conflict with anything else
#         active in network. If no port number is provided, default port 514
#         will be used.
#
source:
    type: file
    path: C:/Windows/System32/LogFiles/W3SVC1
    nameGlob: ex*.log
    startAtEnd: false


# Optional property (Except "sourceType").
#
# These fields are in addition to the data that is already present in the
# files being tailed. Each record read from the file will be enriched with
# these fields.
#
fields:
   sourceType: iis-logs
   nodeName: Node1
   tierName: Tier1
   appName: App1

# Optional property.
#
# Grok is a way to define and use complex, nested regular expressions in an
# easy to read and use format.
#
# A Grok pattern ultimately resolves and compiles into a regular expression.
# The advantage of using Grok is its ability to compose complex patterns from
# simpler pattern definitions, like a "formal grammar".
#
# See https://grokdebug.herokuapp.com/patterns for examples.
#
# The application comes pre-loaded with some well known Grok patterns in
# the form of ".grok" files. They are available under the "conf/grok" directory.
# Custom Grok files can be added to this directory and they will be
# available for use here when the application is restarted.
#
# The Grok patterns here are meant to match a part of the log "message" string.
# If multiple Grok patterns are provided, each one will be applied to the
# "message" string individually.
#
# A Grok pattern is really a regular expression with the option of referencing
# other known Grok patterns by name. Like this "%{JAVACLASS:myClassName}".
# This means that we are looking for a sub-string that looks like a Java Class
# name. Once the pattern is found, the matching sub-string will be extracted
# and stored separately as a first class field, with "myClassName" as the key.
#
# By default, these patterns do not match multiline strings. To look for
# the pattern sub-string across a multiline string, please refer to:
# http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html#DOTALL
#

grok:
  patterns:
    - "%{TIMESTAMP_ISO8601:eventTimestamp}%{SPACE}%{NOTSPACE:s_sitename}%{SPACE}%{IPV4:s_ip}%{SPACE}%{NOTSPACE:cs_method}%{SPACE}%{NOTSPACE:cs_uri_stem}%{SPACE}%{NOTSPACE:cs_uri_query}%{SPACE}%{NOTSPACE:s_port}%{SPACE}%{NOTSPACE:cs_username}%{SPACE}%{IPV4:c_ip}%{SPACE}%{NOTSPACE:cs_useragent}%{SPACE}%{NOTSPACE:cs_referer}%{SPACE}%{NOTSPACE:sc_status}%{SPACE}%{NOTSPACE:sc_substatus}%{SPACE}%{NOTSPACE:sc_win32_substatus}%{SPACE}%{NUMBER:time_taken}%{DATA}"

# Optional property.
#
# The KeyValue Stage is a way to support parsing of logs to identify and capture
# key-value pairs with a user defined delimiter.
# The KeyValue Stage is defined after the Grok Stage (if defined), and can leverage
# parsing done in the GrokStage to identify the key-value pairs in the logs.
# For details refer to 'sample-glassfish-log.job' file.

# Optional property.
#
# RequestGuid attempts to extract the request GUID from the specified "source" field.
# For details refer to 'sample-analytics-log-with-request-guid.job' file.

# Optional property.
#
# If records have a timestamp that should be used as "the" eventTimestamp then
# the format can be provided here to ensure that the string gets parsed and
# transformed correctly to UTC time zone.
#
# An attempt will be made to extract the timestamp automatically, failing which
# one will be added at the time the record is read from the file.
#
# UTC time zone is used throughout the system to ensure consistency of
# timestamps across sources from different time zones. This means that all
# timestamps should be converted to UTC time zone.
#
# If the format ends with a "z" or "Z" then the time zone offset is used to
# convert to UTC time. No time zone means local time zone.
#
# A reference list of available patterns can be found here:
# http://www.joda.org/joda-time/key_format.html
#
eventTimestamp:
   pattern: "yyyy-MM-dd HH:mm:ss"

# Optional property.
#
# The transform stage is applied after all fields have been captured from the log message.
# The user can specify a list of field names, for which they want to cast
# the value to a specific type or rename the field with an "alias".
# For details refer to 'sample-glassfish-log.job' file.

# ####################################
# ###   Start sample file format   ###
# ####################################
#
#2015-12-14 13:01:00 W3SVC1 22.22.2.222 GET /examples/images/return.gif - 80 - 11.11.1.111 Mozilla/5.0+(Windows+NT+6.3;+Trident/7.0;+rv:11.0)+like+Gecko http://mysite.com/userdata1.htm 200 0 0 78
#2015-12-14 13:01:05 W3SVC1 22.22.2.222 GET /examples/images/code.gif - 80 - 11.11.1.111 Mozilla/5.0+(Windows+NT+6.3;+WOW64;+rv:11.0)+like+Gecko http://mysite.com/userdata2.htm 200 0 0 82
#2015-12-14 13:01:07 W3SVC1 22.22.2.222 GET /examples/images/HelloWorldExample - 80 - 11.11.1.111 Mozilla/5.0+(Windows+NT+6.3;+WOW64;+Trident/7.0)+like+Gecko http://mysite.com/userdata3.htm 200 0 0 0
#2015-12-14 13:02:18 W3SVC1 22.22.2.222 GET /examples/images/code.gif - 80 - 11.11.1.111 Mozilla/5.0+(Windows+NT+6.3;+WOW64;+Trident/7.0;+rv:11.0)+like+Gecko http://mysite.com/userdata4.htm 200 0 0 343
#2015-12-14 13:02:32 W3SVC1 22.22.2.222 GET /examples/images/return.gif - 80 - 11.11.1.111 Mozilla/5.0+(Windows+NT+6.3;+WOW64;+Trident/7.0;+rv:11.0)+like+Gecko http://mysite.com/userdata5.htm 200 0 0 112
#
# ##################################
# ###   End sample file format   ###
# ##################################